// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hostfrequencyscaling.proto

package hostfrequencyscaling

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Config struct {
	FreqScalPolicies                       map[string]*Policy `protobuf:"bytes,1,rep,name=freq_scal_policies,json=freqScalPolicies,proto3" json:"freq_scal_policies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FreqSensorUrl                          string             `protobuf:"bytes,2,opt,name=freq_sensor_url,json=freqSensorUrl,proto3" json:"freq_sensor_url,omitempty"`
	ScalingFreqPolicy                      string             `protobuf:"bytes,3,opt,name=scaling_freq_policy,json=scalingFreqPolicy,proto3" json:"scaling_freq_policy,omitempty"`
	LowToHighScaler                        string             `protobuf:"bytes,4,opt,name=low_to_high_scaler,json=lowToHighScaler,proto3" json:"low_to_high_scaler,omitempty"`
	HighToLowScaler                        string             `protobuf:"bytes,5,opt,name=high_to_low_scaler,json=highToLowScaler,proto3" json:"high_to_low_scaler,omitempty"`
	TimeBoundThrottleRetentionDuration     int32              `protobuf:"varint,6,opt,name=time_bound_throttle_retention_duration,json=timeBoundThrottleRetentionDuration,proto3" json:"time_bound_throttle_retention_duration,omitempty"`
	ThrottleRetention                      bool               `protobuf:"varint,7,opt,name=throttle_retention,json=throttleRetention,proto3" json:"throttle_retention,omitempty"`
	ThermalSensorUrl                       string             `protobuf:"bytes,8,opt,name=thermal_sensor_url,json=thermalSensorUrl,proto3" json:"thermal_sensor_url,omitempty"`
	TimeBoundThrottleRetention             bool               `protobuf:"varint,9,opt,name=time_bound_throttle_retention,json=timeBoundThrottleRetention,proto3" json:"time_bound_throttle_retention,omitempty"`
	ThermalBoundThrottleRetention          bool               `protobuf:"varint,10,opt,name=thermal_bound_throttle_retention,json=thermalBoundThrottleRetention,proto3" json:"thermal_bound_throttle_retention,omitempty"`
	ThermalBoundThrottleRetentionThreshold int32              `protobuf:"varint,11,opt,name=thermal_bound_throttle_retention_threshold,json=thermalBoundThrottleRetentionThreshold,proto3" json:"thermal_bound_throttle_retention_threshold,omitempty"`
	XXX_NoUnkeyedLiteral                   struct{}           `json:"-"`
	XXX_unrecognized                       []byte             `json:"-"`
	XXX_sizecache                          int32              `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_c70f0aaf9840244f, []int{0}
}
func (m *Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return m.Size()
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetFreqScalPolicies() map[string]*Policy {
	if m != nil {
		return m.FreqScalPolicies
	}
	return nil
}

func (m *Config) GetFreqSensorUrl() string {
	if m != nil {
		return m.FreqSensorUrl
	}
	return ""
}

func (m *Config) GetScalingFreqPolicy() string {
	if m != nil {
		return m.ScalingFreqPolicy
	}
	return ""
}

func (m *Config) GetLowToHighScaler() string {
	if m != nil {
		return m.LowToHighScaler
	}
	return ""
}

func (m *Config) GetHighToLowScaler() string {
	if m != nil {
		return m.HighToLowScaler
	}
	return ""
}

func (m *Config) GetTimeBoundThrottleRetentionDuration() int32 {
	if m != nil {
		return m.TimeBoundThrottleRetentionDuration
	}
	return 0
}

func (m *Config) GetThrottleRetention() bool {
	if m != nil {
		return m.ThrottleRetention
	}
	return false
}

func (m *Config) GetThermalSensorUrl() string {
	if m != nil {
		return m.ThermalSensorUrl
	}
	return ""
}

func (m *Config) GetTimeBoundThrottleRetention() bool {
	if m != nil {
		return m.TimeBoundThrottleRetention
	}
	return false
}

func (m *Config) GetThermalBoundThrottleRetention() bool {
	if m != nil {
		return m.ThermalBoundThrottleRetention
	}
	return false
}

func (m *Config) GetThermalBoundThrottleRetentionThreshold() int32 {
	if m != nil {
		return m.ThermalBoundThrottleRetentionThreshold
	}
	return 0
}

func (*Config) XXX_MessageName() string {
	return "HostFrequencyScaling.Config"
}

type Policy struct {
	ScalingGovernor      string   `protobuf:"bytes,1,opt,name=scaling_governor,json=scalingGovernor,proto3" json:"scaling_governor,omitempty"`
	ScalingMinFreq       string   `protobuf:"bytes,2,opt,name=scaling_min_freq,json=scalingMinFreq,proto3" json:"scaling_min_freq,omitempty"`
	ScalingMaxFreq       string   `protobuf:"bytes,3,opt,name=scaling_max_freq,json=scalingMaxFreq,proto3" json:"scaling_max_freq,omitempty"`
	NodeArch             string   `protobuf:"bytes,4,opt,name=node_arch,json=nodeArch,proto3" json:"node_arch,omitempty"`
	NodePlatform         string   `protobuf:"bytes,5,opt,name=node_platform,json=nodePlatform,proto3" json:"node_platform,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Policy) Reset()         { *m = Policy{} }
func (m *Policy) String() string { return proto.CompactTextString(m) }
func (*Policy) ProtoMessage()    {}
func (*Policy) Descriptor() ([]byte, []int) {
	return fileDescriptor_c70f0aaf9840244f, []int{1}
}
func (m *Policy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Policy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Policy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Policy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Policy.Merge(m, src)
}
func (m *Policy) XXX_Size() int {
	return m.Size()
}
func (m *Policy) XXX_DiscardUnknown() {
	xxx_messageInfo_Policy.DiscardUnknown(m)
}

var xxx_messageInfo_Policy proto.InternalMessageInfo

func (m *Policy) GetScalingGovernor() string {
	if m != nil {
		return m.ScalingGovernor
	}
	return ""
}

func (m *Policy) GetScalingMinFreq() string {
	if m != nil {
		return m.ScalingMinFreq
	}
	return ""
}

func (m *Policy) GetScalingMaxFreq() string {
	if m != nil {
		return m.ScalingMaxFreq
	}
	return ""
}

func (m *Policy) GetNodeArch() string {
	if m != nil {
		return m.NodeArch
	}
	return ""
}

func (m *Policy) GetNodePlatform() string {
	if m != nil {
		return m.NodePlatform
	}
	return ""
}

func (*Policy) XXX_MessageName() string {
	return "HostFrequencyScaling.Policy"
}
func init() {
	proto.RegisterType((*Config)(nil), "HostFrequencyScaling.Config")
	golang_proto.RegisterType((*Config)(nil), "HostFrequencyScaling.Config")
	proto.RegisterMapType((map[string]*Policy)(nil), "HostFrequencyScaling.Config.FreqScalPoliciesEntry")
	golang_proto.RegisterMapType((map[string]*Policy)(nil), "HostFrequencyScaling.Config.FreqScalPoliciesEntry")
	proto.RegisterType((*Policy)(nil), "HostFrequencyScaling.Policy")
	golang_proto.RegisterType((*Policy)(nil), "HostFrequencyScaling.Policy")
}

func init() { proto.RegisterFile("hostfrequencyscaling.proto", fileDescriptor_c70f0aaf9840244f) }
func init() { golang_proto.RegisterFile("hostfrequencyscaling.proto", fileDescriptor_c70f0aaf9840244f) }

var fileDescriptor_c70f0aaf9840244f = []byte{
	// 561 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0xcd, 0x6e, 0x13, 0x3f,
	0x14, 0xc5, 0xe5, 0xe6, 0xdf, 0xfc, 0x1b, 0x87, 0x92, 0xd4, 0x7c, 0x68, 0x14, 0x68, 0x14, 0x05,
	0x29, 0x0a, 0xd0, 0x4e, 0xa5, 0xb0, 0x41, 0xb0, 0x6a, 0xf9, 0x68, 0x17, 0x20, 0x55, 0xd3, 0xb0,
	0xe9, 0xc6, 0x4c, 0x26, 0xce, 0xcc, 0x08, 0xc7, 0x37, 0x78, 0x3c, 0x4d, 0xf3, 0x26, 0x3c, 0x0e,
	0xcb, 0xb2, 0xe3, 0x11, 0x50, 0xfa, 0x22, 0xc8, 0x77, 0x1c, 0x95, 0x96, 0xa4, 0xec, 0x3c, 0xe7,
	0xfe, 0x7c, 0x8e, 0xc7, 0x3a, 0x32, 0x6d, 0x24, 0x90, 0x99, 0x91, 0x16, 0x5f, 0x73, 0xa1, 0xa2,
	0x59, 0x16, 0x85, 0x32, 0x55, 0xb1, 0x3f, 0xd1, 0x60, 0x80, 0xdd, 0x3f, 0x82, 0xcc, 0xbc, 0x5f,
	0xcc, 0x4e, 0x8a, 0x59, 0x63, 0x37, 0x4e, 0x4d, 0x92, 0x0f, 0xfc, 0x08, 0xc6, 0x7b, 0x31, 0xc4,
	0xb0, 0x87, 0xf0, 0x20, 0x1f, 0xe1, 0x17, 0x7e, 0xe0, 0xaa, 0x30, 0x69, 0x7f, 0x2b, 0xd3, 0xf2,
	0x1b, 0x50, 0xa3, 0x34, 0x66, 0x9f, 0x29, 0xb3, 0x49, 0xdc, 0xa6, 0xf0, 0x09, 0xc8, 0x34, 0x4a,
	0x45, 0xe6, 0x91, 0x56, 0xa9, 0x5b, 0xed, 0xf5, 0xfc, 0x65, 0x61, 0x7e, 0xb1, 0xd3, 0xb7, 0xba,
	0x95, 0x8e, 0xdd, 0xa6, 0x77, 0xca, 0xe8, 0x59, 0x50, 0x1f, 0xdd, 0x90, 0x59, 0x87, 0xd6, 0x8a,
	0x04, 0xa1, 0x32, 0xd0, 0x3c, 0xd7, 0xd2, 0x5b, 0x6b, 0x91, 0x6e, 0x25, 0xd8, 0x44, 0x14, 0xd5,
	0x4f, 0x5a, 0x32, 0x9f, 0xde, 0x73, 0xbf, 0xca, 0x91, 0xc7, 0xc3, 0xcc, 0xbc, 0x12, 0xb2, 0x5b,
	0x6e, 0x64, 0x43, 0xd1, 0x79, 0xc6, 0x9e, 0x53, 0x26, 0x61, 0xca, 0x0d, 0xf0, 0x24, 0x8d, 0x13,
	0xfc, 0x01, 0xa1, 0xbd, 0xff, 0x10, 0xaf, 0x49, 0x98, 0xf6, 0xe1, 0x28, 0x8d, 0x93, 0x13, 0x94,
	0x2d, 0x8c, 0x94, 0x01, 0x6e, 0x37, 0x39, 0x78, 0xbd, 0x80, 0xed, 0xa4, 0x0f, 0x1f, 0x60, 0xea,
	0xe0, 0x80, 0x76, 0x4c, 0x3a, 0x16, 0x7c, 0x00, 0xb9, 0x1a, 0x72, 0x93, 0x68, 0x30, 0x46, 0x0a,
	0xae, 0x85, 0x11, 0xca, 0xa4, 0xa0, 0xf8, 0x30, 0xd7, 0xa1, 0x5d, 0x78, 0xe5, 0x16, 0xe9, 0xae,
	0x07, 0x6d, 0x4b, 0x1f, 0x58, 0xb8, 0xef, 0xd8, 0x60, 0x81, 0xbe, 0x75, 0x24, 0xdb, 0xa5, 0xec,
	0x6f, 0x23, 0xef, 0xff, 0x16, 0xe9, 0x6e, 0x04, 0x5b, 0xe6, 0xe6, 0x36, 0xb6, 0x63, 0x71, 0xa1,
	0xc7, 0xa1, 0xfc, 0xf3, 0xde, 0x36, 0xf0, 0xbc, 0x75, 0x37, 0xb9, 0xba, 0xba, 0x7d, 0xba, 0x7d,
	0xeb, 0x81, 0xbd, 0x0a, 0xe6, 0x34, 0x56, 0x9f, 0x93, 0x1d, 0xd2, 0xd6, 0x22, 0x70, 0xa5, 0x0b,
	0x45, 0x97, 0x6d, 0xc7, 0xad, 0x30, 0x3a, 0xa5, 0xcf, 0xfe, 0x65, 0x64, 0x25, 0x91, 0x25, 0x20,
	0x87, 0x5e, 0x15, 0x2f, 0xb0, 0x73, 0xab, 0x65, 0x7f, 0x41, 0x37, 0x42, 0xfa, 0x60, 0x69, 0xeb,
	0x58, 0x9d, 0x96, 0xbe, 0x88, 0x99, 0x47, 0xf0, 0x7e, 0xec, 0x92, 0xf5, 0xe8, 0xfa, 0x59, 0x28,
	0x73, 0x81, 0x5d, 0xab, 0xf6, 0x1e, 0x2f, 0xaf, 0x72, 0x51, 0xa5, 0xa0, 0x40, 0x5f, 0xad, 0xbd,
	0x24, 0xed, 0x1f, 0x84, 0x96, 0x5d, 0xc1, 0x9e, 0xd2, 0xfa, 0xa2, 0x90, 0x31, 0x9c, 0x09, 0xad,
	0x40, 0xbb, 0x84, 0x9a, 0xd3, 0x0f, 0x9d, 0xcc, 0xba, 0x57, 0xe8, 0x38, 0x55, 0xd8, 0x5f, 0x57,
	0xf2, 0xbb, 0x4e, 0xff, 0x98, 0x2a, 0x9b, 0x7e, 0x8d, 0x0c, 0xcf, 0x0b, 0xb2, 0x74, 0x9d, 0x0c,
	0xcf, 0x91, 0x7c, 0x44, 0x2b, 0x0a, 0x86, 0x82, 0x87, 0x3a, 0x4a, 0x5c, 0xad, 0x37, 0xac, 0xb0,
	0xaf, 0xa3, 0x84, 0x3d, 0xa1, 0x9b, 0x38, 0x9c, 0xc8, 0xd0, 0x8c, 0x40, 0x8f, 0x5d, 0x95, 0xef,
	0x58, 0xf1, 0xd8, 0x69, 0x07, 0x3b, 0x17, 0xf3, 0x26, 0xf9, 0x39, 0x6f, 0x92, 0x5f, 0xf3, 0x26,
	0xf9, 0x7e, 0xd9, 0x24, 0x17, 0x97, 0x4d, 0x72, 0xfa, 0xd0, 0x7f, 0xbd, 0xec, 0x7d, 0x19, 0x94,
	0xf1, 0x6d, 0x78, 0xf1, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x2a, 0xf1, 0xf4, 0xcb, 0x7e, 0x04, 0x00,
	0x00,
}

func (m *Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ThermalBoundThrottleRetentionThreshold != 0 {
		i = encodeVarintHostfrequencyscaling(dAtA, i, uint64(m.ThermalBoundThrottleRetentionThreshold))
		i--
		dAtA[i] = 0x58
	}
	if m.ThermalBoundThrottleRetention {
		i--
		if m.ThermalBoundThrottleRetention {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.TimeBoundThrottleRetention {
		i--
		if m.TimeBoundThrottleRetention {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.ThermalSensorUrl) > 0 {
		i -= len(m.ThermalSensorUrl)
		copy(dAtA[i:], m.ThermalSensorUrl)
		i = encodeVarintHostfrequencyscaling(dAtA, i, uint64(len(m.ThermalSensorUrl)))
		i--
		dAtA[i] = 0x42
	}
	if m.ThrottleRetention {
		i--
		if m.ThrottleRetention {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.TimeBoundThrottleRetentionDuration != 0 {
		i = encodeVarintHostfrequencyscaling(dAtA, i, uint64(m.TimeBoundThrottleRetentionDuration))
		i--
		dAtA[i] = 0x30
	}
	if len(m.HighToLowScaler) > 0 {
		i -= len(m.HighToLowScaler)
		copy(dAtA[i:], m.HighToLowScaler)
		i = encodeVarintHostfrequencyscaling(dAtA, i, uint64(len(m.HighToLowScaler)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LowToHighScaler) > 0 {
		i -= len(m.LowToHighScaler)
		copy(dAtA[i:], m.LowToHighScaler)
		i = encodeVarintHostfrequencyscaling(dAtA, i, uint64(len(m.LowToHighScaler)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ScalingFreqPolicy) > 0 {
		i -= len(m.ScalingFreqPolicy)
		copy(dAtA[i:], m.ScalingFreqPolicy)
		i = encodeVarintHostfrequencyscaling(dAtA, i, uint64(len(m.ScalingFreqPolicy)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FreqSensorUrl) > 0 {
		i -= len(m.FreqSensorUrl)
		copy(dAtA[i:], m.FreqSensorUrl)
		i = encodeVarintHostfrequencyscaling(dAtA, i, uint64(len(m.FreqSensorUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FreqScalPolicies) > 0 {
		for k := range m.FreqScalPolicies {
			v := m.FreqScalPolicies[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintHostfrequencyscaling(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintHostfrequencyscaling(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintHostfrequencyscaling(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Policy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Policy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Policy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NodePlatform) > 0 {
		i -= len(m.NodePlatform)
		copy(dAtA[i:], m.NodePlatform)
		i = encodeVarintHostfrequencyscaling(dAtA, i, uint64(len(m.NodePlatform)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NodeArch) > 0 {
		i -= len(m.NodeArch)
		copy(dAtA[i:], m.NodeArch)
		i = encodeVarintHostfrequencyscaling(dAtA, i, uint64(len(m.NodeArch)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ScalingMaxFreq) > 0 {
		i -= len(m.ScalingMaxFreq)
		copy(dAtA[i:], m.ScalingMaxFreq)
		i = encodeVarintHostfrequencyscaling(dAtA, i, uint64(len(m.ScalingMaxFreq)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ScalingMinFreq) > 0 {
		i -= len(m.ScalingMinFreq)
		copy(dAtA[i:], m.ScalingMinFreq)
		i = encodeVarintHostfrequencyscaling(dAtA, i, uint64(len(m.ScalingMinFreq)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ScalingGovernor) > 0 {
		i -= len(m.ScalingGovernor)
		copy(dAtA[i:], m.ScalingGovernor)
		i = encodeVarintHostfrequencyscaling(dAtA, i, uint64(len(m.ScalingGovernor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintHostfrequencyscaling(dAtA []byte, offset int, v uint64) int {
	offset -= sovHostfrequencyscaling(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FreqScalPolicies) > 0 {
		for k, v := range m.FreqScalPolicies {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovHostfrequencyscaling(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovHostfrequencyscaling(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovHostfrequencyscaling(uint64(mapEntrySize))
		}
	}
	l = len(m.FreqSensorUrl)
	if l > 0 {
		n += 1 + l + sovHostfrequencyscaling(uint64(l))
	}
	l = len(m.ScalingFreqPolicy)
	if l > 0 {
		n += 1 + l + sovHostfrequencyscaling(uint64(l))
	}
	l = len(m.LowToHighScaler)
	if l > 0 {
		n += 1 + l + sovHostfrequencyscaling(uint64(l))
	}
	l = len(m.HighToLowScaler)
	if l > 0 {
		n += 1 + l + sovHostfrequencyscaling(uint64(l))
	}
	if m.TimeBoundThrottleRetentionDuration != 0 {
		n += 1 + sovHostfrequencyscaling(uint64(m.TimeBoundThrottleRetentionDuration))
	}
	if m.ThrottleRetention {
		n += 2
	}
	l = len(m.ThermalSensorUrl)
	if l > 0 {
		n += 1 + l + sovHostfrequencyscaling(uint64(l))
	}
	if m.TimeBoundThrottleRetention {
		n += 2
	}
	if m.ThermalBoundThrottleRetention {
		n += 2
	}
	if m.ThermalBoundThrottleRetentionThreshold != 0 {
		n += 1 + sovHostfrequencyscaling(uint64(m.ThermalBoundThrottleRetentionThreshold))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Policy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ScalingGovernor)
	if l > 0 {
		n += 1 + l + sovHostfrequencyscaling(uint64(l))
	}
	l = len(m.ScalingMinFreq)
	if l > 0 {
		n += 1 + l + sovHostfrequencyscaling(uint64(l))
	}
	l = len(m.ScalingMaxFreq)
	if l > 0 {
		n += 1 + l + sovHostfrequencyscaling(uint64(l))
	}
	l = len(m.NodeArch)
	if l > 0 {
		n += 1 + l + sovHostfrequencyscaling(uint64(l))
	}
	l = len(m.NodePlatform)
	if l > 0 {
		n += 1 + l + sovHostfrequencyscaling(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovHostfrequencyscaling(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHostfrequencyscaling(x uint64) (n int) {
	return sovHostfrequencyscaling(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHostfrequencyscaling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreqScalPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostfrequencyscaling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHostfrequencyscaling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHostfrequencyscaling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FreqScalPolicies == nil {
				m.FreqScalPolicies = make(map[string]*Policy)
			}
			var mapkey string
			var mapvalue *Policy
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHostfrequencyscaling
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHostfrequencyscaling
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthHostfrequencyscaling
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthHostfrequencyscaling
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHostfrequencyscaling
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthHostfrequencyscaling
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthHostfrequencyscaling
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Policy{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHostfrequencyscaling(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthHostfrequencyscaling
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.FreqScalPolicies[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreqSensorUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostfrequencyscaling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostfrequencyscaling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostfrequencyscaling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FreqSensorUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScalingFreqPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostfrequencyscaling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostfrequencyscaling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostfrequencyscaling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScalingFreqPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowToHighScaler", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostfrequencyscaling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostfrequencyscaling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostfrequencyscaling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LowToHighScaler = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighToLowScaler", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostfrequencyscaling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostfrequencyscaling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostfrequencyscaling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HighToLowScaler = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeBoundThrottleRetentionDuration", wireType)
			}
			m.TimeBoundThrottleRetentionDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostfrequencyscaling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeBoundThrottleRetentionDuration |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThrottleRetention", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostfrequencyscaling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThrottleRetention = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThermalSensorUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostfrequencyscaling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostfrequencyscaling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostfrequencyscaling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThermalSensorUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeBoundThrottleRetention", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostfrequencyscaling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeBoundThrottleRetention = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThermalBoundThrottleRetention", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostfrequencyscaling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThermalBoundThrottleRetention = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThermalBoundThrottleRetentionThreshold", wireType)
			}
			m.ThermalBoundThrottleRetentionThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostfrequencyscaling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThermalBoundThrottleRetentionThreshold |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHostfrequencyscaling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHostfrequencyscaling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Policy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHostfrequencyscaling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Policy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Policy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScalingGovernor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostfrequencyscaling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostfrequencyscaling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostfrequencyscaling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScalingGovernor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScalingMinFreq", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostfrequencyscaling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostfrequencyscaling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostfrequencyscaling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScalingMinFreq = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScalingMaxFreq", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostfrequencyscaling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostfrequencyscaling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostfrequencyscaling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScalingMaxFreq = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeArch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostfrequencyscaling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostfrequencyscaling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostfrequencyscaling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeArch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodePlatform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostfrequencyscaling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostfrequencyscaling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostfrequencyscaling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodePlatform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHostfrequencyscaling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHostfrequencyscaling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHostfrequencyscaling(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHostfrequencyscaling
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHostfrequencyscaling
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHostfrequencyscaling
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHostfrequencyscaling
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHostfrequencyscaling
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHostfrequencyscaling
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHostfrequencyscaling        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHostfrequencyscaling          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHostfrequencyscaling = fmt.Errorf("proto: unexpected end of group")
)
