// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hostthermaldiscovery.proto

package hostthermaldiscovery

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Config struct {
	PollingInterval      string   `protobuf:"bytes,1,opt,name=polling_interval,json=pollingInterval,proto3" json:"polling_interval,omitempty"`
	TempSensorPath       string   `protobuf:"bytes,2,opt,name=temp_sensor_path,json=tempSensorPath,proto3" json:"temp_sensor_path,omitempty"`
	FreqSensorUrl        string   `protobuf:"bytes,3,opt,name=freq_sensor_url,json=freqSensorUrl,proto3" json:"freq_sensor_url,omitempty"`
	LogThermalData       bool     `protobuf:"varint,4,opt,name=log_thermal_data,json=logThermalData,proto3" json:"log_thermal_data,omitempty"`
	LogHere              string   `protobuf:"bytes,5,opt,name=log_here,json=logHere,proto3" json:"log_here,omitempty"`
	LowerNormal          int32    `protobuf:"varint,6,opt,name=lower_normal,json=lowerNormal,proto3" json:"lower_normal,omitempty"`
	UpperNormal          int32    `protobuf:"varint,7,opt,name=upper_normal,json=upperNormal,proto3" json:"upper_normal,omitempty"`
	LowerHigh            int32    `protobuf:"varint,8,opt,name=lower_high,json=lowerHigh,proto3" json:"lower_high,omitempty"`
	UpperHigh            int32    `protobuf:"varint,9,opt,name=upper_high,json=upperHigh,proto3" json:"upper_high,omitempty"`
	LowerCritical        int32    `protobuf:"varint,10,opt,name=lower_critical,json=lowerCritical,proto3" json:"lower_critical,omitempty"`
	UpperCritical        int32    `protobuf:"varint,11,opt,name=upper_critical,json=upperCritical,proto3" json:"upper_critical,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_37ff6fc8258206a0, []int{0}
}
func (m *Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return m.Size()
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetPollingInterval() string {
	if m != nil {
		return m.PollingInterval
	}
	return ""
}

func (m *Config) GetTempSensorPath() string {
	if m != nil {
		return m.TempSensorPath
	}
	return ""
}

func (m *Config) GetFreqSensorUrl() string {
	if m != nil {
		return m.FreqSensorUrl
	}
	return ""
}

func (m *Config) GetLogThermalData() bool {
	if m != nil {
		return m.LogThermalData
	}
	return false
}

func (m *Config) GetLogHere() string {
	if m != nil {
		return m.LogHere
	}
	return ""
}

func (m *Config) GetLowerNormal() int32 {
	if m != nil {
		return m.LowerNormal
	}
	return 0
}

func (m *Config) GetUpperNormal() int32 {
	if m != nil {
		return m.UpperNormal
	}
	return 0
}

func (m *Config) GetLowerHigh() int32 {
	if m != nil {
		return m.LowerHigh
	}
	return 0
}

func (m *Config) GetUpperHigh() int32 {
	if m != nil {
		return m.UpperHigh
	}
	return 0
}

func (m *Config) GetLowerCritical() int32 {
	if m != nil {
		return m.LowerCritical
	}
	return 0
}

func (m *Config) GetUpperCritical() int32 {
	if m != nil {
		return m.UpperCritical
	}
	return 0
}

func (*Config) XXX_MessageName() string {
	return "HostThermalDiscovery.Config"
}
func init() {
	proto.RegisterType((*Config)(nil), "HostThermalDiscovery.Config")
	golang_proto.RegisterType((*Config)(nil), "HostThermalDiscovery.Config")
}

func init() { proto.RegisterFile("hostthermaldiscovery.proto", fileDescriptor_37ff6fc8258206a0) }
func init() { golang_proto.RegisterFile("hostthermaldiscovery.proto", fileDescriptor_37ff6fc8258206a0) }

var fileDescriptor_37ff6fc8258206a0 = []byte{
	// 366 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcb, 0x6a, 0x1b, 0x31,
	0x14, 0x86, 0x51, 0x5d, 0xdf, 0xe4, 0xfa, 0xc2, 0x50, 0x8a, 0x6a, 0xe8, 0xe0, 0x16, 0x5a, 0xa6,
	0xd0, 0xda, 0x8b, 0x2e, 0xbb, 0x8b, 0xb3, 0x70, 0x36, 0x21, 0x38, 0xc9, 0x26, 0x9b, 0x41, 0x1e,
	0xcb, 0x92, 0x40, 0x9e, 0x33, 0xd1, 0x68, 0x1c, 0xf2, 0x2e, 0x79, 0x98, 0x2c, 0xbd, 0xcc, 0x23,
	0x04, 0xfb, 0x45, 0xc2, 0x1c, 0xcd, 0x24, 0x9b, 0xec, 0x74, 0xbe, 0xff, 0xd3, 0x0f, 0x07, 0x89,
	0x8e, 0x15, 0xe4, 0xce, 0x29, 0x61, 0xb7, 0xdc, 0xac, 0x75, 0x9e, 0xc0, 0x4e, 0xd8, 0xfb, 0x69,
	0x66, 0xc1, 0x41, 0xf0, 0x79, 0x01, 0xb9, 0xbb, 0xf2, 0xd9, 0x69, 0x9d, 0x8d, 0xff, 0x4a, 0xed,
	0x54, 0xb1, 0x9a, 0x26, 0xb0, 0x9d, 0x49, 0x90, 0x30, 0x43, 0x79, 0x55, 0x6c, 0x70, 0xc2, 0x01,
	0x4f, 0xbe, 0xe4, 0xc7, 0x43, 0x83, 0xb6, 0xe6, 0x90, 0x6e, 0xb4, 0x0c, 0x7e, 0xd3, 0x51, 0x06,
	0xc6, 0xe8, 0x54, 0xc6, 0x3a, 0x75, 0xc2, 0xee, 0xb8, 0x61, 0x64, 0x42, 0xa2, 0xee, 0x72, 0x58,
	0xf1, 0xb3, 0x0a, 0x07, 0x11, 0x1d, 0x39, 0xb1, 0xcd, 0xe2, 0x5c, 0xa4, 0x39, 0xd8, 0x38, 0xe3,
	0x4e, 0xb1, 0x0f, 0xa8, 0x0e, 0x4a, 0x7e, 0x89, 0xf8, 0x82, 0x3b, 0x15, 0xfc, 0xa2, 0xc3, 0x8d,
	0x15, 0xb7, 0xb5, 0x59, 0x58, 0xc3, 0x1a, 0x28, 0xf6, 0x4b, 0xec, 0xc5, 0x6b, 0x8b, 0x8d, 0x06,
	0x64, 0x5c, 0xad, 0x1a, 0xaf, 0xb9, 0xe3, 0xec, 0xe3, 0x84, 0x44, 0x9d, 0xe5, 0xc0, 0x80, 0xac,
	0xb7, 0xe4, 0x8e, 0x07, 0x5f, 0x69, 0xa7, 0x34, 0x95, 0xb0, 0x82, 0x35, 0xb1, 0xaa, 0x6d, 0x40,
	0x2e, 0x84, 0x15, 0xc1, 0x77, 0xfa, 0xc9, 0xc0, 0x9d, 0xb0, 0x71, 0x0a, 0xa5, 0xce, 0x5a, 0x13,
	0x12, 0x35, 0x97, 0x3d, 0x64, 0xe7, 0x88, 0x4a, 0xa5, 0xc8, 0xb2, 0x37, 0xa5, 0xed, 0x15, 0x64,
	0x95, 0xf2, 0x8d, 0x52, 0xdf, 0xa2, 0xb4, 0x54, 0xac, 0x83, 0x42, 0x17, 0xc9, 0x42, 0x4b, 0x55,
	0xc6, 0xbe, 0x01, 0xe3, 0xae, 0x8f, 0x91, 0x60, 0xfc, 0x93, 0x0e, 0xfc, 0xed, 0xc4, 0x6a, 0xa7,
	0x13, 0x6e, 0x18, 0x45, 0xa5, 0x8f, 0x74, 0x5e, 0xc1, 0x52, 0xf3, 0x2d, 0xaf, 0x5a, 0xcf, 0x6b,
	0x48, 0x6b, 0xed, 0xe4, 0xcf, 0xfe, 0x10, 0x92, 0xa7, 0x43, 0x48, 0x9e, 0x0f, 0x21, 0x79, 0x3c,
	0x86, 0x64, 0x7f, 0x0c, 0xc9, 0xcd, 0x97, 0xe9, 0xff, 0xf7, 0xfe, 0xc5, 0xaa, 0x85, 0x6f, 0xfa,
	0xef, 0x25, 0x00, 0x00, 0xff, 0xff, 0xef, 0xae, 0x6e, 0xe0, 0x36, 0x02, 0x00, 0x00,
}

func (m *Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpperCritical != 0 {
		i = encodeVarintHostthermaldiscovery(dAtA, i, uint64(m.UpperCritical))
		i--
		dAtA[i] = 0x58
	}
	if m.LowerCritical != 0 {
		i = encodeVarintHostthermaldiscovery(dAtA, i, uint64(m.LowerCritical))
		i--
		dAtA[i] = 0x50
	}
	if m.UpperHigh != 0 {
		i = encodeVarintHostthermaldiscovery(dAtA, i, uint64(m.UpperHigh))
		i--
		dAtA[i] = 0x48
	}
	if m.LowerHigh != 0 {
		i = encodeVarintHostthermaldiscovery(dAtA, i, uint64(m.LowerHigh))
		i--
		dAtA[i] = 0x40
	}
	if m.UpperNormal != 0 {
		i = encodeVarintHostthermaldiscovery(dAtA, i, uint64(m.UpperNormal))
		i--
		dAtA[i] = 0x38
	}
	if m.LowerNormal != 0 {
		i = encodeVarintHostthermaldiscovery(dAtA, i, uint64(m.LowerNormal))
		i--
		dAtA[i] = 0x30
	}
	if len(m.LogHere) > 0 {
		i -= len(m.LogHere)
		copy(dAtA[i:], m.LogHere)
		i = encodeVarintHostthermaldiscovery(dAtA, i, uint64(len(m.LogHere)))
		i--
		dAtA[i] = 0x2a
	}
	if m.LogThermalData {
		i--
		if m.LogThermalData {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.FreqSensorUrl) > 0 {
		i -= len(m.FreqSensorUrl)
		copy(dAtA[i:], m.FreqSensorUrl)
		i = encodeVarintHostthermaldiscovery(dAtA, i, uint64(len(m.FreqSensorUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TempSensorPath) > 0 {
		i -= len(m.TempSensorPath)
		copy(dAtA[i:], m.TempSensorPath)
		i = encodeVarintHostthermaldiscovery(dAtA, i, uint64(len(m.TempSensorPath)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PollingInterval) > 0 {
		i -= len(m.PollingInterval)
		copy(dAtA[i:], m.PollingInterval)
		i = encodeVarintHostthermaldiscovery(dAtA, i, uint64(len(m.PollingInterval)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintHostthermaldiscovery(dAtA []byte, offset int, v uint64) int {
	offset -= sovHostthermaldiscovery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PollingInterval)
	if l > 0 {
		n += 1 + l + sovHostthermaldiscovery(uint64(l))
	}
	l = len(m.TempSensorPath)
	if l > 0 {
		n += 1 + l + sovHostthermaldiscovery(uint64(l))
	}
	l = len(m.FreqSensorUrl)
	if l > 0 {
		n += 1 + l + sovHostthermaldiscovery(uint64(l))
	}
	if m.LogThermalData {
		n += 2
	}
	l = len(m.LogHere)
	if l > 0 {
		n += 1 + l + sovHostthermaldiscovery(uint64(l))
	}
	if m.LowerNormal != 0 {
		n += 1 + sovHostthermaldiscovery(uint64(m.LowerNormal))
	}
	if m.UpperNormal != 0 {
		n += 1 + sovHostthermaldiscovery(uint64(m.UpperNormal))
	}
	if m.LowerHigh != 0 {
		n += 1 + sovHostthermaldiscovery(uint64(m.LowerHigh))
	}
	if m.UpperHigh != 0 {
		n += 1 + sovHostthermaldiscovery(uint64(m.UpperHigh))
	}
	if m.LowerCritical != 0 {
		n += 1 + sovHostthermaldiscovery(uint64(m.LowerCritical))
	}
	if m.UpperCritical != 0 {
		n += 1 + sovHostthermaldiscovery(uint64(m.UpperCritical))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovHostthermaldiscovery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHostthermaldiscovery(x uint64) (n int) {
	return sovHostthermaldiscovery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHostthermaldiscovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollingInterval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostthermaldiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostthermaldiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostthermaldiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PollingInterval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TempSensorPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostthermaldiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostthermaldiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostthermaldiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TempSensorPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreqSensorUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostthermaldiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostthermaldiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostthermaldiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FreqSensorUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogThermalData", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostthermaldiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogThermalData = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogHere", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostthermaldiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostthermaldiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostthermaldiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogHere = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerNormal", wireType)
			}
			m.LowerNormal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostthermaldiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowerNormal |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperNormal", wireType)
			}
			m.UpperNormal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostthermaldiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpperNormal |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerHigh", wireType)
			}
			m.LowerHigh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostthermaldiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowerHigh |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperHigh", wireType)
			}
			m.UpperHigh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostthermaldiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpperHigh |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerCritical", wireType)
			}
			m.LowerCritical = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostthermaldiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowerCritical |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperCritical", wireType)
			}
			m.UpperCritical = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostthermaldiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpperCritical |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHostthermaldiscovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHostthermaldiscovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHostthermaldiscovery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHostthermaldiscovery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHostthermaldiscovery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHostthermaldiscovery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHostthermaldiscovery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHostthermaldiscovery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHostthermaldiscovery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHostthermaldiscovery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHostthermaldiscovery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHostthermaldiscovery = fmt.Errorf("proto: unexpected end of group")
)
