// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pipxe.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PiPXEConfig struct {
	SrvIfaceUrl          string   `protobuf:"bytes,1,opt,name=srv_iface_url,json=srvIfaceUrl,proto3" json:"srv_iface_url,omitempty"`
	SrvIpUrl             string   `protobuf:"bytes,2,opt,name=srv_ip_url,json=srvIpUrl,proto3" json:"srv_ip_url,omitempty"`
	IpUrl                string   `protobuf:"bytes,3,opt,name=ip_url,json=ipUrl,proto3" json:"ip_url,omitempty"`
	MacUrl               string   `protobuf:"bytes,4,opt,name=mac_url,json=macUrl,proto3" json:"mac_url,omitempty"`
	SubnetUrl            string   `protobuf:"bytes,5,opt,name=subnet_url,json=subnetUrl,proto3" json:"subnet_url,omitempty"`
	TftpDir              string   `protobuf:"bytes,6,opt,name=tftp_dir,json=tftpDir,proto3" json:"tftp_dir,omitempty"`
	ArpDeadline          string   `protobuf:"bytes,7,opt,name=arp_deadline,json=arpDeadline,proto3" json:"arp_deadline,omitempty"`
	DhcpRetry            uint32   `protobuf:"varint,8,opt,name=dhcp_retry,json=dhcpRetry,proto3" json:"dhcp_retry,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PiPXEConfig) Reset()         { *m = PiPXEConfig{} }
func (m *PiPXEConfig) String() string { return proto.CompactTextString(m) }
func (*PiPXEConfig) ProtoMessage()    {}
func (*PiPXEConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_pipxe_448c670b9c9be627, []int{0}
}
func (m *PiPXEConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PiPXEConfig.Unmarshal(m, b)
}
func (m *PiPXEConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PiPXEConfig.Marshal(b, m, deterministic)
}
func (dst *PiPXEConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PiPXEConfig.Merge(dst, src)
}
func (m *PiPXEConfig) XXX_Size() int {
	return xxx_messageInfo_PiPXEConfig.Size(m)
}
func (m *PiPXEConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PiPXEConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PiPXEConfig proto.InternalMessageInfo

func (m *PiPXEConfig) GetSrvIfaceUrl() string {
	if m != nil {
		return m.SrvIfaceUrl
	}
	return ""
}

func (m *PiPXEConfig) GetSrvIpUrl() string {
	if m != nil {
		return m.SrvIpUrl
	}
	return ""
}

func (m *PiPXEConfig) GetIpUrl() string {
	if m != nil {
		return m.IpUrl
	}
	return ""
}

func (m *PiPXEConfig) GetMacUrl() string {
	if m != nil {
		return m.MacUrl
	}
	return ""
}

func (m *PiPXEConfig) GetSubnetUrl() string {
	if m != nil {
		return m.SubnetUrl
	}
	return ""
}

func (m *PiPXEConfig) GetTftpDir() string {
	if m != nil {
		return m.TftpDir
	}
	return ""
}

func (m *PiPXEConfig) GetArpDeadline() string {
	if m != nil {
		return m.ArpDeadline
	}
	return ""
}

func (m *PiPXEConfig) GetDhcpRetry() uint32 {
	if m != nil {
		return m.DhcpRetry
	}
	return 0
}

func init() {
	proto.RegisterType((*PiPXEConfig)(nil), "proto.PiPXEConfig")
}

func init() { proto.RegisterFile("pipxe.proto", fileDescriptor_pipxe_448c670b9c9be627) }

var fileDescriptor_pipxe_448c670b9c9be627 = []byte{
	// 221 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x2c, 0x90, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x40, 0x89, 0x9a, 0xaf, 0x89, 0xbd, 0x04, 0xc4, 0x15, 0x14, 0x6a, 0x4f, 0x3d, 0x79, 0xf1,
	0x27, 0x58, 0x0f, 0xde, 0x4a, 0x40, 0xf0, 0xb6, 0x6c, 0x77, 0x37, 0x3a, 0x90, 0x26, 0xc3, 0x64,
	0x5b, 0xf4, 0xb7, 0x7b, 0x29, 0x33, 0xed, 0x69, 0xd9, 0xf7, 0x1e, 0xc3, 0x30, 0xd0, 0x10, 0xd2,
	0x6f, 0x7c, 0x21, 0x9e, 0xd2, 0xd4, 0xe6, 0xfa, 0xac, 0xfe, 0x33, 0x68, 0xb6, 0xb8, 0xfd, 0x7a,
	0x7f, 0x9b, 0xc6, 0x1e, 0xbf, 0xdb, 0x15, 0x2c, 0x66, 0x3e, 0x5a, 0xec, 0x9d, 0x8f, 0xf6, 0xc0,
	0x83, 0xc9, 0x96, 0xd9, 0xba, 0xee, 0x9a, 0x99, 0x8f, 0x1f, 0xc2, 0x3e, 0x79, 0x68, 0x1f, 0x01,
	0xb4, 0x21, 0x0d, 0xae, 0x34, 0xa8, 0x24, 0x20, 0xb1, 0x77, 0x50, 0x5c, 0xcc, 0xb5, 0x9a, 0x1c,
	0x15, 0xdf, 0x43, 0xb9, 0x77, 0x5e, 0xf9, 0x8d, 0xf2, 0x62, 0xef, 0xbc, 0x88, 0x27, 0x80, 0xf9,
	0xb0, 0x1b, 0x63, 0x52, 0x97, 0xab, 0xab, 0xcf, 0x44, 0xf4, 0x03, 0x54, 0xa9, 0x4f, 0x64, 0x03,
	0xb2, 0x29, 0x54, 0x96, 0xf2, 0xdf, 0x20, 0xb7, 0xcf, 0x70, 0xeb, 0x98, 0x6c, 0x88, 0x2e, 0x0c,
	0x38, 0x46, 0x53, 0x9e, 0x57, 0x75, 0x4c, 0x9b, 0x0b, 0x92, 0xe1, 0xe1, 0xc7, 0x93, 0xe5, 0x98,
	0xf8, 0xcf, 0x54, 0xcb, 0x6c, 0xbd, 0xe8, 0x6a, 0x21, 0x9d, 0x80, 0x5d, 0xa1, 0x47, 0x78, 0x3d,
	0x05, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x48, 0xc3, 0x3a, 0x1a, 0x01, 0x00, 0x00,
}
