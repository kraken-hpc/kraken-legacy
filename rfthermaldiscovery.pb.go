// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rfthermaldiscovery.proto

package rfthermaldiscovery

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Config struct {
	Servers              map[string]*Server     `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IpUrl                string                 `protobuf:"bytes,2,opt,name=ip_url,json=ipUrl,proto3" json:"ip_url,omitempty"`
	AggUrl               string                 `protobuf:"bytes,3,opt,name=agg_url,json=aggUrl,proto3" json:"agg_url,omitempty"`
	PollingInterval      string                 `protobuf:"bytes,4,opt,name=polling_interval,json=pollingInterval,proto3" json:"polling_interval,omitempty"`
	RfThermalThresholds  map[string]*Thresholds `protobuf:"bytes,5,rep,name=rf_thermal_thresholds,json=rfThermalThresholds,proto3" json:"rf_thermal_thresholds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1f74e80867e017d, []int{0}
}
func (m *Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return m.Size()
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetServers() map[string]*Server {
	if m != nil {
		return m.Servers
	}
	return nil
}

func (m *Config) GetIpUrl() string {
	if m != nil {
		return m.IpUrl
	}
	return ""
}

func (m *Config) GetAggUrl() string {
	if m != nil {
		return m.AggUrl
	}
	return ""
}

func (m *Config) GetPollingInterval() string {
	if m != nil {
		return m.PollingInterval
	}
	return ""
}

func (m *Config) GetRfThermalThresholds() map[string]*Thresholds {
	if m != nil {
		return m.RfThermalThresholds
	}
	return nil
}

func (*Config) XXX_MessageName() string {
	return "RFThermalDiscovery.Config"
}

type Server struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 string   `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	ReqTimeout           int32    `protobuf:"varint,4,opt,name=req_timeout,json=reqTimeout,proto3" json:"req_timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Server) Reset()         { *m = Server{} }
func (m *Server) String() string { return proto.CompactTextString(m) }
func (*Server) ProtoMessage()    {}
func (*Server) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1f74e80867e017d, []int{1}
}
func (m *Server) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Server) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Server.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Server) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Server.Merge(m, src)
}
func (m *Server) XXX_Size() int {
	return m.Size()
}
func (m *Server) XXX_DiscardUnknown() {
	xxx_messageInfo_Server.DiscardUnknown(m)
}

var xxx_messageInfo_Server proto.InternalMessageInfo

func (m *Server) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Server) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Server) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *Server) GetReqTimeout() int32 {
	if m != nil {
		return m.ReqTimeout
	}
	return 0
}

func (*Server) XXX_MessageName() string {
	return "RFThermalDiscovery.Server"
}

type Thresholds struct {
	LowerNormal          int32    `protobuf:"varint,1,opt,name=lower_normal,json=lowerNormal,proto3" json:"lower_normal,omitempty"`
	UpperNormal          int32    `protobuf:"varint,2,opt,name=upper_normal,json=upperNormal,proto3" json:"upper_normal,omitempty"`
	LowerHigh            int32    `protobuf:"varint,3,opt,name=lower_high,json=lowerHigh,proto3" json:"lower_high,omitempty"`
	UpperHigh            int32    `protobuf:"varint,4,opt,name=upper_high,json=upperHigh,proto3" json:"upper_high,omitempty"`
	LowerCritical        int32    `protobuf:"varint,5,opt,name=lower_critical,json=lowerCritical,proto3" json:"lower_critical,omitempty"`
	UpperCritical        int32    `protobuf:"varint,6,opt,name=upper_critical,json=upperCritical,proto3" json:"upper_critical,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Thresholds) Reset()         { *m = Thresholds{} }
func (m *Thresholds) String() string { return proto.CompactTextString(m) }
func (*Thresholds) ProtoMessage()    {}
func (*Thresholds) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1f74e80867e017d, []int{2}
}
func (m *Thresholds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Thresholds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Thresholds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Thresholds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Thresholds.Merge(m, src)
}
func (m *Thresholds) XXX_Size() int {
	return m.Size()
}
func (m *Thresholds) XXX_DiscardUnknown() {
	xxx_messageInfo_Thresholds.DiscardUnknown(m)
}

var xxx_messageInfo_Thresholds proto.InternalMessageInfo

func (m *Thresholds) GetLowerNormal() int32 {
	if m != nil {
		return m.LowerNormal
	}
	return 0
}

func (m *Thresholds) GetUpperNormal() int32 {
	if m != nil {
		return m.UpperNormal
	}
	return 0
}

func (m *Thresholds) GetLowerHigh() int32 {
	if m != nil {
		return m.LowerHigh
	}
	return 0
}

func (m *Thresholds) GetUpperHigh() int32 {
	if m != nil {
		return m.UpperHigh
	}
	return 0
}

func (m *Thresholds) GetLowerCritical() int32 {
	if m != nil {
		return m.LowerCritical
	}
	return 0
}

func (m *Thresholds) GetUpperCritical() int32 {
	if m != nil {
		return m.UpperCritical
	}
	return 0
}

func (*Thresholds) XXX_MessageName() string {
	return "RFThermalDiscovery.Thresholds"
}
func init() {
	proto.RegisterType((*Config)(nil), "RFThermalDiscovery.Config")
	golang_proto.RegisterType((*Config)(nil), "RFThermalDiscovery.Config")
	proto.RegisterMapType((map[string]*Thresholds)(nil), "RFThermalDiscovery.Config.RfThermalThresholdsEntry")
	golang_proto.RegisterMapType((map[string]*Thresholds)(nil), "RFThermalDiscovery.Config.RfThermalThresholdsEntry")
	proto.RegisterMapType((map[string]*Server)(nil), "RFThermalDiscovery.Config.ServersEntry")
	golang_proto.RegisterMapType((map[string]*Server)(nil), "RFThermalDiscovery.Config.ServersEntry")
	proto.RegisterType((*Server)(nil), "RFThermalDiscovery.Server")
	golang_proto.RegisterType((*Server)(nil), "RFThermalDiscovery.Server")
	proto.RegisterType((*Thresholds)(nil), "RFThermalDiscovery.Thresholds")
	golang_proto.RegisterType((*Thresholds)(nil), "RFThermalDiscovery.Thresholds")
}

func init() { proto.RegisterFile("rfthermaldiscovery.proto", fileDescriptor_a1f74e80867e017d) }
func init() { golang_proto.RegisterFile("rfthermaldiscovery.proto", fileDescriptor_a1f74e80867e017d) }

var fileDescriptor_a1f74e80867e017d = []byte{
	// 489 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xc1, 0x6f, 0xd3, 0x30,
	0x14, 0xc6, 0xe5, 0x74, 0xc9, 0xd4, 0xd7, 0x31, 0x26, 0xc3, 0x44, 0x54, 0x89, 0x30, 0x2a, 0x21,
	0x06, 0x12, 0x19, 0xda, 0x38, 0x20, 0x38, 0xc1, 0x00, 0xc1, 0x85, 0x43, 0x28, 0x1c, 0xb8, 0x44,
	0x69, 0xe7, 0x38, 0x16, 0x6e, 0x9c, 0x39, 0x4e, 0x51, 0xff, 0x3b, 0x8e, 0xbb, 0xc1, 0x5f, 0x80,
	0x50, 0xf7, 0x8f, 0xa0, 0x3c, 0xbb, 0x6b, 0x51, 0xcb, 0x6e, 0x2f, 0xdf, 0xfb, 0xf9, 0xfb, 0xbe,
	0xc4, 0x0a, 0x84, 0x3a, 0x37, 0x05, 0xd3, 0x93, 0x4c, 0x9e, 0x89, 0x7a, 0xac, 0xa6, 0x4c, 0xcf,
	0xe2, 0x4a, 0x2b, 0xa3, 0x28, 0x4d, 0xde, 0x0d, 0xed, 0xe6, 0xcd, 0x62, 0xd3, 0x7f, 0xc2, 0x85,
	0x29, 0x9a, 0x51, 0x3c, 0x56, 0x93, 0x23, 0xae, 0xb8, 0x3a, 0x42, 0x74, 0xd4, 0xe4, 0xf8, 0x84,
	0x0f, 0x38, 0x59, 0x8b, 0xc1, 0xcf, 0x0e, 0x04, 0xa7, 0xaa, 0xcc, 0x05, 0xa7, 0xaf, 0x60, 0xbb,
	0x66, 0x7a, 0xca, 0x74, 0x1d, 0x92, 0x83, 0xce, 0x61, 0xef, 0xf8, 0x61, 0xbc, 0xee, 0x1f, 0x5b,
	0x38, 0xfe, 0x64, 0xc9, 0xb7, 0xa5, 0xd1, 0xb3, 0x64, 0x71, 0x8e, 0xee, 0x43, 0x20, 0xaa, 0xb4,
	0xd1, 0x32, 0xf4, 0x0e, 0xc8, 0x61, 0x37, 0xf1, 0x45, 0xf5, 0x59, 0x4b, 0x7a, 0x07, 0xb6, 0x33,
	0xce, 0x51, 0xef, 0xa0, 0x1e, 0x64, 0x9c, 0xb7, 0x8b, 0x47, 0xb0, 0x57, 0x29, 0x29, 0x45, 0xc9,
	0x53, 0x51, 0x1a, 0xa6, 0xa7, 0x99, 0x0c, 0xb7, 0x90, 0xb8, 0xe9, 0xf4, 0x0f, 0x4e, 0xa6, 0x1c,
	0xf6, 0x75, 0x9e, 0xba, 0x0f, 0x91, 0x9a, 0x42, 0xb3, 0xba, 0x50, 0xf2, 0xac, 0x0e, 0x7d, 0xec,
	0x7a, 0x72, 0x4d, 0xd7, 0x24, 0x77, 0x9b, 0xe1, 0xd5, 0x29, 0xdb, 0xfb, 0x96, 0x5e, 0xdf, 0xf4,
	0xbf, 0xc0, 0xce, 0xea, 0xcb, 0xd1, 0x3d, 0xe8, 0x7c, 0x63, 0xb3, 0x90, 0x60, 0xad, 0x76, 0xa4,
	0x4f, 0xc1, 0x9f, 0x66, 0xb2, 0x61, 0xf8, 0x92, 0xbd, 0xe3, 0xfe, 0xa6, 0x68, 0x6b, 0x91, 0x58,
	0xf0, 0x85, 0xf7, 0x9c, 0xf4, 0x73, 0x08, 0xff, 0x57, 0x64, 0x43, 0xc6, 0xb3, 0x7f, 0x33, 0xa2,
	0x4d, 0x19, 0x4b, 0x97, 0x95, 0x9c, 0x41, 0x06, 0x81, 0x0d, 0xa7, 0x14, 0xb6, 0xca, 0x6c, 0xc2,
	0x9c, 0x2d, 0xce, 0x74, 0x17, 0x3c, 0x51, 0xb9, 0xdb, 0xf1, 0x44, 0xd5, 0x32, 0x95, 0xd2, 0xc6,
	0xdd, 0x0b, 0xce, 0xf4, 0x1e, 0xf4, 0x34, 0x3b, 0x4f, 0x8d, 0x98, 0x30, 0xd5, 0x18, 0xbc, 0x10,
	0x3f, 0x01, 0xcd, 0xce, 0x87, 0x56, 0x19, 0xfc, 0x26, 0x00, 0xcb, 0x70, 0x7a, 0x1f, 0x76, 0xa4,
	0xfa, 0xce, 0x74, 0x5a, 0xaa, 0xb6, 0x20, 0xe6, 0xf9, 0x49, 0x0f, 0xb5, 0x8f, 0x28, 0xb5, 0x48,
	0x53, 0x55, 0x4b, 0xc4, 0xb3, 0x08, 0x6a, 0x0e, 0xb9, 0x0b, 0x60, 0x5d, 0x0a, 0xc1, 0x0b, 0xec,
	0xe3, 0x27, 0x5d, 0x54, 0xde, 0x0b, 0x5e, 0xb4, 0x6b, 0xeb, 0x80, 0x6b, 0xdb, 0xa9, 0x8b, 0x0a,
	0xae, 0x1f, 0xc0, 0xae, 0x3d, 0x3d, 0xd6, 0xc2, 0x88, 0x71, 0x26, 0x43, 0x1f, 0x91, 0x1b, 0xa8,
	0x9e, 0x3a, 0xb1, 0xc5, 0xac, 0xcb, 0x15, 0x16, 0x58, 0x0c, 0xd5, 0x05, 0xf6, 0xfa, 0xf1, 0xc5,
	0x3c, 0x22, 0xbf, 0xe6, 0x11, 0xf9, 0x33, 0x8f, 0xc8, 0x8f, 0xcb, 0x88, 0x5c, 0x5c, 0x46, 0xe4,
	0xeb, 0xed, 0xf8, 0xe5, 0xfa, 0xaf, 0x38, 0x0a, 0xf0, 0x47, 0x3a, 0xf9, 0x1b, 0x00, 0x00, 0xff,
	0xff, 0xd9, 0xb5, 0x89, 0x9b, 0xa7, 0x03, 0x00, 0x00,
}

func (m *Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RfThermalThresholds) > 0 {
		for k := range m.RfThermalThresholds {
			v := m.RfThermalThresholds[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintRfthermaldiscovery(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRfthermaldiscovery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRfthermaldiscovery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.PollingInterval) > 0 {
		i -= len(m.PollingInterval)
		copy(dAtA[i:], m.PollingInterval)
		i = encodeVarintRfthermaldiscovery(dAtA, i, uint64(len(m.PollingInterval)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AggUrl) > 0 {
		i -= len(m.AggUrl)
		copy(dAtA[i:], m.AggUrl)
		i = encodeVarintRfthermaldiscovery(dAtA, i, uint64(len(m.AggUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IpUrl) > 0 {
		i -= len(m.IpUrl)
		copy(dAtA[i:], m.IpUrl)
		i = encodeVarintRfthermaldiscovery(dAtA, i, uint64(len(m.IpUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Servers) > 0 {
		for k := range m.Servers {
			v := m.Servers[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintRfthermaldiscovery(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRfthermaldiscovery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRfthermaldiscovery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Server) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Server) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Server) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReqTimeout != 0 {
		i = encodeVarintRfthermaldiscovery(dAtA, i, uint64(m.ReqTimeout))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Port) > 0 {
		i -= len(m.Port)
		copy(dAtA[i:], m.Port)
		i = encodeVarintRfthermaldiscovery(dAtA, i, uint64(len(m.Port)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintRfthermaldiscovery(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRfthermaldiscovery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Thresholds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Thresholds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Thresholds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpperCritical != 0 {
		i = encodeVarintRfthermaldiscovery(dAtA, i, uint64(m.UpperCritical))
		i--
		dAtA[i] = 0x30
	}
	if m.LowerCritical != 0 {
		i = encodeVarintRfthermaldiscovery(dAtA, i, uint64(m.LowerCritical))
		i--
		dAtA[i] = 0x28
	}
	if m.UpperHigh != 0 {
		i = encodeVarintRfthermaldiscovery(dAtA, i, uint64(m.UpperHigh))
		i--
		dAtA[i] = 0x20
	}
	if m.LowerHigh != 0 {
		i = encodeVarintRfthermaldiscovery(dAtA, i, uint64(m.LowerHigh))
		i--
		dAtA[i] = 0x18
	}
	if m.UpperNormal != 0 {
		i = encodeVarintRfthermaldiscovery(dAtA, i, uint64(m.UpperNormal))
		i--
		dAtA[i] = 0x10
	}
	if m.LowerNormal != 0 {
		i = encodeVarintRfthermaldiscovery(dAtA, i, uint64(m.LowerNormal))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRfthermaldiscovery(dAtA []byte, offset int, v uint64) int {
	offset -= sovRfthermaldiscovery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Servers) > 0 {
		for k, v := range m.Servers {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRfthermaldiscovery(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRfthermaldiscovery(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRfthermaldiscovery(uint64(mapEntrySize))
		}
	}
	l = len(m.IpUrl)
	if l > 0 {
		n += 1 + l + sovRfthermaldiscovery(uint64(l))
	}
	l = len(m.AggUrl)
	if l > 0 {
		n += 1 + l + sovRfthermaldiscovery(uint64(l))
	}
	l = len(m.PollingInterval)
	if l > 0 {
		n += 1 + l + sovRfthermaldiscovery(uint64(l))
	}
	if len(m.RfThermalThresholds) > 0 {
		for k, v := range m.RfThermalThresholds {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRfthermaldiscovery(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRfthermaldiscovery(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRfthermaldiscovery(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Server) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRfthermaldiscovery(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovRfthermaldiscovery(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovRfthermaldiscovery(uint64(l))
	}
	if m.ReqTimeout != 0 {
		n += 1 + sovRfthermaldiscovery(uint64(m.ReqTimeout))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Thresholds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LowerNormal != 0 {
		n += 1 + sovRfthermaldiscovery(uint64(m.LowerNormal))
	}
	if m.UpperNormal != 0 {
		n += 1 + sovRfthermaldiscovery(uint64(m.UpperNormal))
	}
	if m.LowerHigh != 0 {
		n += 1 + sovRfthermaldiscovery(uint64(m.LowerHigh))
	}
	if m.UpperHigh != 0 {
		n += 1 + sovRfthermaldiscovery(uint64(m.UpperHigh))
	}
	if m.LowerCritical != 0 {
		n += 1 + sovRfthermaldiscovery(uint64(m.LowerCritical))
	}
	if m.UpperCritical != 0 {
		n += 1 + sovRfthermaldiscovery(uint64(m.UpperCritical))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRfthermaldiscovery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRfthermaldiscovery(x uint64) (n int) {
	return sovRfthermaldiscovery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRfthermaldiscovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRfthermaldiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRfthermaldiscovery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRfthermaldiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Servers == nil {
				m.Servers = make(map[string]*Server)
			}
			var mapkey string
			var mapvalue *Server
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRfthermaldiscovery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRfthermaldiscovery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRfthermaldiscovery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRfthermaldiscovery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRfthermaldiscovery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRfthermaldiscovery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRfthermaldiscovery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Server{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRfthermaldiscovery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRfthermaldiscovery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Servers[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRfthermaldiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRfthermaldiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRfthermaldiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRfthermaldiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRfthermaldiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRfthermaldiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollingInterval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRfthermaldiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRfthermaldiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRfthermaldiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PollingInterval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RfThermalThresholds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRfthermaldiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRfthermaldiscovery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRfthermaldiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RfThermalThresholds == nil {
				m.RfThermalThresholds = make(map[string]*Thresholds)
			}
			var mapkey string
			var mapvalue *Thresholds
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRfthermaldiscovery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRfthermaldiscovery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRfthermaldiscovery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRfthermaldiscovery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRfthermaldiscovery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRfthermaldiscovery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRfthermaldiscovery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Thresholds{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRfthermaldiscovery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRfthermaldiscovery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RfThermalThresholds[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRfthermaldiscovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRfthermaldiscovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Server) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRfthermaldiscovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Server: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Server: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRfthermaldiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRfthermaldiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRfthermaldiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRfthermaldiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRfthermaldiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRfthermaldiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRfthermaldiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRfthermaldiscovery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRfthermaldiscovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqTimeout", wireType)
			}
			m.ReqTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRfthermaldiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqTimeout |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRfthermaldiscovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRfthermaldiscovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Thresholds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRfthermaldiscovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Thresholds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Thresholds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerNormal", wireType)
			}
			m.LowerNormal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRfthermaldiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowerNormal |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperNormal", wireType)
			}
			m.UpperNormal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRfthermaldiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpperNormal |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerHigh", wireType)
			}
			m.LowerHigh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRfthermaldiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowerHigh |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperHigh", wireType)
			}
			m.UpperHigh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRfthermaldiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpperHigh |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerCritical", wireType)
			}
			m.LowerCritical = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRfthermaldiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowerCritical |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperCritical", wireType)
			}
			m.UpperCritical = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRfthermaldiscovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpperCritical |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRfthermaldiscovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRfthermaldiscovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRfthermaldiscovery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRfthermaldiscovery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRfthermaldiscovery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRfthermaldiscovery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRfthermaldiscovery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRfthermaldiscovery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRfthermaldiscovery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRfthermaldiscovery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRfthermaldiscovery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRfthermaldiscovery = fmt.Errorf("proto: unexpected end of group")
)
